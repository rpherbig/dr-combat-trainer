=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#hunting-buddy
=end

custom_require.call(%w[common common-arcana common-items common-travel equipmanager events spellmonitor])

class HuntingBuddy
  def initialize
    arg_definitions = [[]]
    args = parse_args(arg_definitions, true)

    @settings = get_settings(args.flex)

    @town_data = get_data('town')[@settings.hometown]
    @hunting_data = get_data('hunting')
    @escort_zones = @hunting_data.escort_zones
    @hunting_zones = @hunting_data.hunting_zones

    @stop_on_familiar_drag = @settings.stop_on_familiar_drag
    echo("  @stop_on_familiar_drag: #{@stop_on_familiar_drag}") if $debug_mode_hunting

    @stop_to_burgle = @settings.stop_to_burgle
    echo("  @stop_to_burgle: #{@stop_to_burgle}") if $debug_mode_hunting

    @stop_on_low_threshold = @settings.stop_on_low_threshold
    echo("  @stop_on_low_threshold: #{@stop_on_low_threshold}") if $debug_mode_hunting

    @stop_on_high_threshold = @settings.stop_on_high_threshold
    echo("  @stop_on_high_threshold: #{@stop_on_high_threshold}") if $debug_mode_hunting

    @skillset_exp_thresholds = {
      'Armor'    => @settings.armor_exp_training_max_threshold,
      'Weapon'   => @settings.weapon_exp_training_max_threshold,
      'Magic'    => @settings.magic_exp_training_max_threshold,
      'Survival' => @settings.survival_exp_training_max_threshold,
      'Lore'     => @settings.lore_exp_training_max_threshold
    }
    echo("  @skillset_exp_thresholds: #{@skillset_exp_thresholds}") if $debug_mode_hunting

    @hunting_buddies_max = @settings.hunting_buddies_max
    echo("  @hunting_buddies_max: #{@hunting_buddies_max}") if $debug_mode_hunting

    @prehunt_buffing_room = @settings.prehunt_buffing_room || @settings.prehunt_buffs
    echo("  @prehunt_buffing_room: #{@prehunt_buffing_room}") if $debug_mode_hunting

    @prehunt_buff_waggle = @settings.prehunt_buff_waggle || 'prehunt_buffs'
    echo("  @prehunt_buff_waggle: #{@prehunt_buff_waggle}") if $debug_mode_hunting

    # After checking all hunting files to use, this array
    # will be the combined set of hunting infos to execute.
    @hunting_info = []

    # Identify any other files to parse for hunting info.
    # The values in `hunting_file_list` or `args.flex` are the suffixes
    # in filename patterns that match "{character}-{suffix}.yaml" format.
    hunting_files = (args.flex.any? ? args.flex : @settings.hunting_file_list) || []
    hunting_files << 'setup' if hunting_files.empty?
    echo("  hunting_files: #{hunting_files}") if $debug_mode_hunting

    hunting_files.each do |character_file_suffix|
      infos = retrieve_settings(character_file_suffix)
      infos.each do |info|
        info['args'] ||= []
        # Hunting info from extra config needs the config name passed on in args
        # so that it can be further passed to other scripts like combat-trainer.
        if character_file_suffix != 'setup' && !info['args'].include?(character_file_suffix)
          info['args'] << character_file_suffix
        end
      end
      @hunting_info += infos
    end
  end

  # make it possible to have all hunting profiles in single file (assuming true multiple yamls aren't needed)
  def retrieve_settings(character_file_suffix)
    if @settings.hunting_profiles_single_yaml
      suffix = character_file_suffix == 'setup' ? '' : '_' + character_file_suffix
      return eval('@settings.hunting_info' + suffix)
    else
      return get_settings([character_file_suffix]).hunting_info
    end
  end

  def main
    check_bundling_rope
    DRC.wait_for_script_to_complete('restock') unless @settings.sell_loot_skip_bank

    @hunting_info.each_with_index do |info, index|
      args = info['args'] # list of args to pass to combat-trainer
      before_actions = info['before'] # list of script names
      after_actions = info['after'] # list of script names
      during_actions = info['during'] # list of script names
      duration = info[:duration] # number of minutes to hunt
      stop_on_high_skills = info['stop_on'] # list of skill names
      stop_on_low_skills = info['stop_on_low'] # list of skill names
      stop_on_boxes = info['boxes'] || info['stop_on_boxes'] # boolean
      stop_on_no_moons = info['moons'] || info['stop_on_moons'] # boolean
      stop_on_encumbrance = info['stop_on_encumbrance'] # numeric threshold
      stop_on_burgle_cooldown = info['stop_on_burgle_cooldown'] # boolean
      hunting_zones = [info[:zone]].flatten.compact # string or list of hunting zones
      waiting_room = info['full_waiting_room'] || @settings.safe_room # room id
      prefer_buddies = info['prefer_buddies'] # boolean
      avoid_buddies = info['avoid_buddies'] # boolean

      if $debug_mode_hunting
        echo("Processing hunting info number #{index + 1}")
        echo("  args: #{args}")
        echo("  before_actions: #{before_actions}")
        echo("  after_actions: #{after_actions}")
        echo("  during_actions: #{during_actions}")
        echo("  duration: #{duration}")
        echo("  stop_on_high_skills: #{stop_on_high_skills}")
        echo("  stop_on_low_skills: #{stop_on_low_skills}")
        echo("  stop_on_boxes: #{stop_on_boxes}")
        echo("  stop_on_no_moons: #{stop_on_no_moons}")
        echo("  stop_on_encumbrance: #{stop_on_encumbrance}")
        echo("  stop_on_burgle_cooldown: #{stop_on_burgle_cooldown}")
        echo("  hunting_zones: #{hunting_zones}")
        echo("  waiting_room: #{waiting_room}")
        echo("  prefer_buddies: #{prefer_buddies}")
        echo("  avoid_buddies: #{avoid_buddies}")
      end

      if @stop_hunting
        DRC.message("***STATUS*** Stopping all hunting because manual intervention")
        stop_actions(during_actions)
        execute_actions(after_actions)
        break
      end

      if @stopped_for_bleeding
        DRC.message("***STATUS*** Stopping all hunting because bleeding")
        DRC.retreat
        stop_script('tendme') if Script.running?('tendme')
        stop_actions(during_actions)
        execute_actions(after_actions)
        break
      end

      if stop_on_boxes && !need_boxes?
        DRC.message("***STATUS*** Skipping hunt because have enough boxes")
        # This purposefully does not perform any actions as an efficiency
        # to move into the next hunt as quickly as possible.
        next
      end

      # Execute scripts to run before the hunt
      execute_actions(before_actions)

      if stop_on_no_moons && !DRCMM.moons_visible?
        DRC.message("***STATUS*** Skipping hunt because no moons")
        stop_actions(during_actions)
        execute_actions(after_actions)
        next
      end

      if encumbered?(stop_on_encumbrance)
        DRC.message("***STATUS*** Skipping hunt because encumbrance: #{DRStats.encumbrance}, threshold: #{stop_on_encumbrance}")
        stop_actions(during_actions)
        execute_actions(after_actions)
        next
      end

      if should_stop_for_high_skills?(stop_on_high_skills)
        DRC.message("***STATUS*** Skipping hunt because skills reached learning threshold: #{stop_on_high_skills}")
        stop_actions(during_actions)
        execute_actions(after_actions)
        next
      end

      if should_stop_for_low_skills?(stop_on_low_skills)
        DRC.message("***STATUS*** Skipping hunt because skills dropped below learning threshold: #{stop_on_low_skills}")
        stop_actions(during_actions)
        execute_actions(after_actions)
        next
      end

      check_prehunt_buffs

      # We need to find a hunting room when we start our first hunt
      # or on subsequent hunts if where we currently are isn't where
      # that next hunt wants to be. These checks help reduce moving
      # around if it's be fine for us to start the next hunt in same spot.
      if index == 0 || !hunting_zones.include?(current_hunting_zone)
        next unless find_hunting_room?(hunting_zones, waiting_room, prefer_buddies, avoid_buddies)
      end

      if @stopped_for_bleeding
        DRC.message("***STATUS*** Stopping all hunting because bleeding")
        DRC.retreat
        stop_script('tendme') if Script.running?('tendme')
        stop_actions(during_actions)
        execute_actions(after_actions)
        break
      end

      # Execute background scripts to run during the hunt
      execute_nonblocking_actions(during_actions)

      hunt(
        args,
        duration,
        stop_on_high_skills,
        stop_on_low_skills,
        stop_on_boxes,
        stop_on_no_moons,
        stop_on_encumbrance,
        stop_on_burgle_cooldown
      )

      # Stop background scripts that ran during the hunt
      stop_actions(during_actions)

      DRCI.stow_hand('left') unless !DRC.right_hand || !DRC.left_hand
      while DRC.bput('stow feet', /You pick up/, /Stow what/) =~ /You pick up/
      end

      DRC.wait_for_script_to_complete('bescort', @exit) if @exit
      DRCA.release_cyclics(@settings.cyclic_no_release)

      # Execute scripts to run after the hunt
      execute_actions(after_actions)
    end

    DRC.message("***STATUS*** Returning to safe room: #{@settings.safe_room}")
    DRCT.walk_to(@settings.safe_room)
    worngear = @settings.combat_trainer_gear_set || "standard"
    EquipmentManager.new(@settings).wear_equipment_set?(worngear)
  end

  def execute_actions(actions)
    actions.each do |action|
      DRC.message("***STATUS*** EXECUTE #{action}")
      script_args = action.split(' ')
      script_name = script_args.shift
      DRC.wait_for_script_to_complete(script_name, script_args)
    end
  end

  def execute_nonblocking_actions(actions)
    actions.each do |action|
      DRC.message("***STATUS*** EXECUTE #{action}")
      script_args = action.split(' ')
      script_name = script_args.shift
      start_script(script_name, script_args)
    end
  end

  def stop_actions(actions)
    actions.each do |action|
      DRC.message("***STATUS*** STOP #{action}")
      script_args = action.split(' ')
      script_name = script_args.shift
      stop_script(script_name) if Script.running?(script_name)
    end
  end

  # ------------------------------------------------------------

  # Ensures you have a bundling rope unless you're not skinning.
  def check_bundling_rope
    return unless @settings.skinning['skin']
    return if DRCI.wearing?('bundle')
    return if DRCI.exists?('bundling rope')

    DRCT.ask_for_item?(
      @town_data['tannery']['id'],
      @town_data['tannery']['name'],
      'bundling rope'
    )
    DRCI.stow_item?('bundling rope')
  end

  def check_prehunt_buffs
    return unless @settings.waggle_sets[@prehunt_buff_waggle]

    DRCT.walk_to(@prehunt_buffing_room)

    DRC.wait_for_script_to_complete('buff', [@prehunt_buff_waggle])
  end

  # ------------------------------------------------------------

  # Returns the hunting zone that you are currently in.
  # If you aren't in a known hunting zone then returns nil.
  def current_hunting_zone(room_id = Room.current.id)
    # Returns the name of the hunting zone of a given room ID.
    @hunting_zones.find { |_name, rooms| rooms.include?(room_id) }.first
  end

  def find_hunting_room?(zones_to_search, waiting_room, prefer_buddies = false, avoid_buddies = false)
    UserVars.friends = @settings.hunting_buddies || []
    UserVars.hunting_nemesis = @settings.hunting_nemesis || []

    return zones_to_search.any? do |zone_to_search|
      escort_info = @escort_zones[zone_to_search]
      if escort_info
        DRCT.walk_to(escort_info['base'])
        DRC.wait_for_script_to_complete('bescort', [escort_info['area'], escort_info['enter']])
        @exit = [escort_info['area'], 'exit']
        return true
      else
        @exit = nil
        rooms_to_search = []

        # After grabbing the list of hunting zones specified in the user's yaml, we'll iterate
        # through each and aggregate the room numbers from base-hunting.yaml.
        # NOTE: Be sure to preserve the order we aggregate the room numbers to match the order
        # of the :zone: list in the yaml. Users expect the :zone: list to be a priority order.
        # We also allow custom hunting zones specified in Charname-setup.yaml.
        zones_to_search.each do |zone|
          if @settings.custom_hunting_zones["#{zone}"]
            echo "Overriding base-hunting.yaml's #{zone}" if @hunting_zones["#{zone}"]
            rooms_to_search += @settings.custom_hunting_zones["#{zone}"]
          else
            if @hunting_zones["#{zone}"]
              rooms_to_search += @hunting_zones["#{zone}"]
            else
              echo "Unable to find hunting zone: #{zone}"
            end
          end
        end

        echo "Aggregated hunting room list: #{rooms_to_search}" if $debug_mode_hunting

        # Make sure our aggregated room list isn't empty. If it is, warn and don't go hunting.
        if rooms_to_search.empty?
          DRC.message("Unable to look up any hunting rooms for your yaml-specified hunting :zone: list.")
          DRC.message("Check your yaml syntax and ensure your :zone:'s name matches base-hunting.yaml or your custom zone name.")
          exit
        end

        return DRCT.find_empty_room(rooms_to_search, waiting_room,
                                    lambda do |_search_attempt|
                                      # Skip room if has more people than your max limit
                                      return false if DRRoom.pcs.size > @hunting_buddies_max
                                      # Skip if one of your nemesis is in the room
                                      return false if (DRRoom.pcs & UserVars.hunting_nemesis).any?

                                      unless avoid_buddies
                                        # Continue if one of your friends is in the room
                                        return true if (DRRoom.pcs & UserVars.friends).any?
                                      end
                                      # Skip if anyone not in your group is in the room
                                      return false if (DRRoom.pcs - DRRoom.group_members).any?

                                      # No visible friends in the room and no visible people
                                      UserVars.friends.each { |friend| Flags.add("hunting-buddy-room-check-#{friend}", friend) }
                                      Flags.add('hunting-buddy-room-check',
                                                # someone speaks
                                                /says?, /,
                                                /You hear/,
                                                # someone attacks from the shadows
                                                /Someone snipes a/,
                                                /leaps from hiding and ambushes/,
                                                # someone is already hunting here
                                                /[A-Z][a-z]+ begins to advance/,
                                                /[A-Z][a-z]+ (jabs|slices|draws|chops|sweeps|lunges|thrusts|claws|gouges|elbows|kicks|punches|knees|shoves|lobs|throws|hurls|fires|shoots|feints) (a|an|some|his|her|their)/)
                                      case DRC.bput('search', 'roundtime', "You're not in any condition to be searching around")
                                      when /roundtime/i
                                        data = reget(40).reverse.take_while { |x| x !~ /You search around/ }
                                        if data.grep(/vague silhouette|You notice \w+, who is|see signs that/).any?
                                          pause
                                          waitrt?
                                          return UserVars.friends.find { |friend| Flags["hunting-buddy-room-check-#{friend}"] }
                                        end
                                        fput("say #{@settings.empty_hunting_room_messages.sample}") unless @settings.empty_hunting_room_messages.empty?
                                        room_is_empty = true
                                        20.times do |_|
                                          pause 0.5
                                          return true if UserVars.friends.find { |friend| Flags["hunting-buddy-room-check-#{friend}"] }
                                          return false if Flags['hunting-buddy-room-check']

                                          room_is_empty = (DRRoom.pcs - DRRoom.group_members - UserVars.friends).empty?
                                        end
                                        room_is_empty
                                      when /You're not in any condition to be searching around/i
                                        DRC.message("***STATUS*** You're too injured to hunt!")
                                        @stop_hunting = true
                                        @stopped_for_bleeding = bleeding?
                                        # Ironically, return true so the search for a suitable hunting room
                                        # stops and then the hunting buddy loop will detect that you need help
                                        # sooner rather than later.
                                        true
                                      end
                                    end,
                                    @settings.hunting_room_min_mana,
                                    @settings.hunting_room_strict_mana,
                                    @settings.hunting_room_max_searches,
                                    prefer_buddies)
      end
    end
  end

  # ------------------------------------------------------------

  # Identify if every skill in the given list has a learning rate
  # at or above the desired threshold for their skillset.
  def should_stop_for_high_skills?(stop_on_high_skills = [])
    stop_on_high_skills && !stop_on_high_skills.empty? && stop_on_high_skills.flatten.all? do |skill|
      DRSkill.getxp(skill) >= get_skill_exp_high_threshold(skill)
    end
  end

  # Identify if at least one skill in the given list has a learning rate
  # at or below the desired threshold for their skillset.
  def should_stop_for_low_skills?(stop_on_low_skills = [])
    stop_on_low_skills && !stop_on_low_skills.empty? && stop_on_low_skills.flatten.any? do |skill|
      DRSkill.getxp(skill) <= get_skill_exp_low_threshold(skill)
    end
  end

  # ------------------------------------------------------------

  # Identify the skills in the given list
  # that have not yet met their learning rate thresholds
  # and so we should continue hunting.
  def get_skills_below_high_threshold(stop_on_high_skills = [])
    stop_on_high_skills.flatten.select do |skill|
      DRSkill.getxp(skill) <= get_skill_exp_high_threshold(skill)
    end
  end

  # Identify the skills in the given list
  # that have fallen below their learning rate thresholds
  # and so we should stop hunting to go work on them.
  # Usually, these are non-combat skills like locksmithing or crafting.
  def get_skills_below_low_threshold(stop_on_low_skills = [])
    stop_on_low_skills.flatten.select do |skill|
      DRSkill.getxp(skill) <= get_skill_exp_low_threshold(skill)
    end
  end

  # ------------------------------------------------------------

  # What is the learning rate high threshold at which point we should stop hunting?
  def get_skill_exp_high_threshold(skill)
    get_skillset_exp_high_threshold(DRSkill.getskillset(skill))
  end

  # What is the learning rate high threshold at which point we should stop hunting?
  def get_skillset_exp_high_threshold(skillset)
    @stop_on_high_threshold || @skillset_exp_thresholds[skillset]
  end

  # ------------------------------------------------------------

  # What is the learning rate low threshold at which point we should stop hunting?
  def get_skill_exp_low_threshold(skill)
    get_skillset_exp_low_threshold(DRSkill.getskillset(skill))
  end

  # What is the learning rate low threshold at which point we should stop hunting?
  def get_skillset_exp_low_threshold(_skillset)
    @stop_on_low_threshold
  end

  # ------------------------------------------------------------
  def yiamura_all_done?
    return true unless UserVars.yiamura
    return true unless UserVars.yiamura['last_raised_room_id'] == Map.current.id

    return (Time.now - UserVars.yiamura['last_raised'].to_i).to_i > 600
  end
  # ------------------------------------------------------------

  # Is your current encumbrance at or higher than the threshold?
  # Threshold is a number from 0 (None) to 11 (It's amazing you aren't squashed!)
  def encumbered?(threshold)
    return false unless threshold

    threshold = [[0, threshold.to_i].max, 11].min # ensure in range
    return DRC.check_encumbrance >= threshold
  end

  # ------------------------------------------------------------

  # Have you reached your lower bound for box count?
  # Designed to be called before combat-trainer starts
  # as a way to avoid hunting if you already have enough boxes.
  def need_boxes?
    return false unless @settings.box_hunt_minimum

    DRCI.count_all_boxes(@settings) <= @settings.box_hunt_minimum
  end

  # Have you reached the upper bound for box count?
  # Designed to be called while combat-trainer is running
  # as a way to know when to stop once you have enough boxes.
  def over_box_limit?
    $COMBAT_TRAINER.get_process('loot').at_box_limit?
  end

  # ------------------------------------------------------------

  def hunt(args, duration, stop_on_high_skills, stop_on_low_skills, stop_on_boxes, stop_on_no_moons, stop_on_encumbrance, stop_on_burgle_cooldown)
    $COMBAT_TRAINER = nil
    hunting_room = Room.current.id
    Flags.add('hunting-buddy-familiar-drag', /^Your .+ grabs ahold of you and drags you .+, out of combat.+$/)
    Flags.add('hunting-buddy-stop-to-burgle', /^A tingling on the back of your neck draws attention to itself by disappearing, making you believe the heat is off from your last break in/)
    DRC.message("***STATUS*** Beginning hunt '#{args}' for '#{duration}' minutes")

    verify_script('combat-trainer')
    start_script('combat-trainer', args)

    # This pause "fixes" a race condition with combat starting and the monitors below trying to kill
    # it before it can get the 'stop' comand.
    # Wait 30 seconds or until combat trainer is all ready to roll
    start = Time.now
    pause until Time.now - start > 30 || $COMBAT_TRAINER.running

    counter = 0
    loop do
      clear
      if DRStats.health < @settings.health_threshold
        DRC.message("***STATUS*** Exiting because low health: #{DRStats.health} < #{@settings.health_threshold}")
        fput('avoid all')
        fput('exit')
      end
      if @settings.stop_hunting_if_bleeding && bleeding?
        DRC.message("***STATUS*** Stopping because bleeding")
        @stopped_for_bleeding = true
        break
      end
      if stop_on_boxes && over_box_limit?
        DRC.message("***STATUS*** Stopping hunt because have enough boxes")
        break
      end
      if stop_on_no_moons && !DRCMM.moons_visible?
        DRC.message("***STATUS*** Stopping because no moons")
        break
      end
      if should_stop_for_high_skills?(stop_on_high_skills) && yiamura_all_done?
        DRC.message("***STATUS*** Stopping because skills reached learning threshold: #{stop_on_high_skills}")
        break
      end
      if should_stop_for_low_skills?(stop_on_low_skills) && yiamura_all_done?
        DRC.message("***STATUS*** Stopping because skills dropped below learning threshold: #{stop_on_low_skills}")
        break
      end
      if @stop_hunting || @next_hunt
        DRC.message("***STATUS*** Stopping because manual intervention")
        @next_hunt = false
        break
      end
      if (duration && (counter / 60) >= duration) && yiamura_all_done?
        DRC.message("***STATUS*** Stopping because time")
        break
      end
      if Flags['hunting-buddy-stop-to-burgle'] && (@stop_to_burgle || stop_on_burgle_cooldown) && yiamura_all_done?
        DRC.message("***STATUS*** Stopping because it's burgle time!")
        Flags.reset('hunting-buddy-stop-to-burgle')
        break
      end
      if Flags['hunting-buddy-familiar-drag'] && @stop_on_familiar_drag
        DRC.message("***STATUS*** Stopping because familiar drug while stunned")
        Flags.reset('hunting-buddy-familiar-drag')
        break
      end
      if Flags['hunting-buddy-familiar-drag'] && !@stop_on_familiar_drag
        DRC.message("***STATUS*** Heading back to room because familiar drug while stunned")
        pause_script('combat-trainer') if Script.running?('combat-trainer')
        DRCT.walk_to(hunting_room)
        unpause_script('combat-trainer') if Script.running?('combat-trainer')
        Flags.reset('hunting-buddy-familiar-drag')
      end
      if (counter % 60).zero?
        # To avoid spamming encumbrance checks, this logic is inside
        # the one minute status update section so it's done only periodically.
        if encumbered?(stop_on_encumbrance)
          DRC.message("***STATUS*** Stopping because encumbrance: #{DRStats.encumbrance}, threshold: #{stop_on_encumbrance}")
          break
        end
        if duration
          if stop_on_high_skills
            DRC.message("***STATUS*** #{duration - (counter / 60)} minutes of hunting remaining or waiting on #{get_skills_below_high_threshold(stop_on_high_skills).join(', ')}")
          else
            DRC.message("***STATUS*** #{duration - (counter / 60)} minutes of hunting remaining")
          end
        else
          if stop_on_high_skills
            DRC.message("***STATUS*** #{counter / 60} minutes of hunting, still waiting on #{get_skills_below_high_threshold(stop_on_high_skills).join(', ')}")
          else
            DRC.message("***STATUS*** #{counter / 60} minutes of hunting")
          end
        end
      end
      counter += 1
      pause 1
    end
    $COMBAT_TRAINER.stop
    pause 1 while $COMBAT_TRAINER.running || Script.running?('combat-trainer')
    DRC.retreat
  end

  def stop_hunting
    @stop_hunting = true
  end

  def next_hunt
    @next_hunt = true
  end
end

before_dying do
  ['combat-trainer'].each do |script_name|
    stop_script(script_name) if Script.running?(script_name)
  end
  DRCA.release_cyclics(get_settings.cyclic_no_release)
  Flags.flags.keys
       .select { |flag_name| flag_name.start_with?('hunting-buddy-') }
       .each   { |flag_name| Flags.delete(flag_name) }
end

$HUNTING_BUDDY = HuntingBuddy.new
$HUNTING_BUDDY.main
